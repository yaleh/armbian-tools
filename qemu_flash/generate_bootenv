#!/usr/bin/bash

# This script is used to generate the envfile for qemu_flash

urglify_uboot_script() {
    # read stdin
    local script=$(cat)
    # remove comments
    script=$(echo "$script" | sed -e 's/#.*//')
    # remove empty lines
    script=$(echo "$script" | sed -e '/^$/d')
    # remove leading and trailing spaces
    script=$(echo "$script" | sed -e 's/^[ \t]*//;s/[ \t]*$//')
    # replace newlines with semicolons
    script=$(echo "$script" | sed -z 's/\n/;/g;s/,$/\n/' )

    echo "$script"
}

cat <<'EOF'
arch=arm
board=qemu-arm
board_name=qemu-arm
boot_a_script=load ${devtype} ${devnum}:${distro_bootpart} ${scriptaddr} ${prefix}${script}; source ${scriptaddr}
boot_efi_binary=load ${devtype} ${devnum}:${distro_bootpart} ${kernel_addr_r} efi/boot/bootaa64.efi; if fdt addr ${fdt_addr_r}; then bootefi ${kernel_addr_r} ${fdt_addr_r};else bootefi ${kernel_addr_r} ${fdtcontroladdr};fi
boot_efi_bootmgr=if fdt addr ${fdt_addr_r}; then bootefi bootmgr ${fdt_addr_r};else bootefi bootmgr;fi
boot_extlinux=sysboot ${devtype} ${devnum}:${distro_bootpart} any ${scriptaddr} ${prefix}${boot_syslinux_conf}
boot_net_usb_start=usb start
boot_pci_enum=pci enum
boot_prefixes=/ /boot/
boot_script_dhcp=boot.scr.uimg
boot_scripts=boot.scr.uimg boot.scr
boot_syslinux_conf=extlinux/extlinux.conf
boot_targets=usb0 scsi0 virtio0 dhcp
bootcmd=run distro_bootcmd
bootcmd_dhcp=setenv devtype dhcp; run boot_net_usb_start; run boot_pci_enum; if dhcp ${scriptaddr} ${boot_script_dhcp}; then source ${scriptaddr}; fi;setenv efi_fdtfile ${fdtfile}; setenv efi_old_vci ${bootp_vci};setenv efi_old_arch ${bootp_arch};setenv bootp_vci PXEClient:Arch:00011:UNDI:003000;setenv bootp_arch 0xb;if dhcp ${kernel_addr_r}; then tftpboot ${fdt_addr_r} dtb/${efi_fdtfile};if fdt addr ${fdt_addr_r}; then bootefi ${kernel_addr_r} ${fdt_addr_r}; else bootefi ${kernel_addr_r} ${fdtcontroladdr};fi;fi;setenv bootp_vci ${efi_old_vci};setenv bootp_arch ${efi_old_arch};setenv efi_fdtfile;setenv efi_old_arch;setenv efi_old_vci;
bootcmd_scsi0=devnum=0; run scsi_boot
bootcmd_usb0=devnum=0; run usb_boot
bootcmd_virtio0=devnum=0; run virtio_boot
bootdelay=2
cpu=armv8
distro_bootcmd=scsi_need_init=; setenv nvme_need_init; virtio_need_init=; for target in ${boot_targets}; do run bootcmd_${target}; done
efi_dtb_prefixes=/ /dtb/ /dtb/current/
ethaddr=52:54:00:ca:77:f7
fdt_addr=0x40000000
fdt_high=0xffffffff
fdtcontroladdr=bedf2df0
initrd_high=0xffffffff
kernel_addr_r=0x40400000
load_efi_dtb=load ${devtype} ${devnum}:${distro_bootpart} ${fdt_addr_r} ${prefix}${efi_fdtfile}
nvme_boot=run boot_pci_enum; run nvme_init; if nvme dev ${devnum}; then devtype=nvme; run scan_dev_for_boot_part; fi
nvme_init=if ${nvme_need_init}; then setenv nvme_need_init false; nvme scan; fi
pxefile_addr_r=0x40300000
ramdisk_addr_r=0x44000000
scan_dev_for_boot=echo Scanning ${devtype} ${devnum}:${distro_bootpart}...; for prefix in ${boot_prefixes}; do run scan_dev_for_extlinux; run scan_dev_for_scripts; done;run scan_dev_for_efi;
scan_dev_for_boot_part=part list ${devtype} ${devnum} -bootable devplist; env exists devplist || setenv devplist 1; for distro_bootpart in ${devplist}; do if fstype ${devtype} ${devnum}:${distro_bootpart} bootfstype; then run scan_dev_for_boot; fi; done; setenv devplist
scan_dev_for_efi=setenv efi_fdtfile ${fdtfile}; for prefix in ${efi_dtb_prefixes}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${efi_fdtfile}; then run load_efi_dtb; fi;done;run boot_efi_bootmgr;if test -e ${devtype} ${devnum}:${distro_bootpart} efi/boot/bootaa64.efi; then echo Found EFI removable media binary efi/boot/bootaa64.efi; run boot_efi_binary; echo EFI LOAD FAILED: continuing...; fi; setenv efi_fdtfile
scan_dev_for_extlinux=if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${boot_syslinux_conf}; then echo Found ${prefix}${boot_syslinux_conf}; run boot_extlinux; echo SCRIPT FAILED: continuing...; fi
scan_dev_for_scripts=for script in ${boot_scripts}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${script}; then echo Found U-Boot script ${prefix}${script}; run boot_a_script; echo SCRIPT FAILED: continuing...; fi; done
scriptaddr=0x40200000
scsi_boot=run scsi_init; if scsi dev ${devnum}; then devtype=scsi; run scan_dev_for_boot_part; fi
scsi_init=if ${scsi_need_init}; then scsi_need_init=false; scsi scan; fi
stderr=pl011@9000000
stdin=pl011@9000000
stdout=pl011@9000000
usb_boot=usb start; if usb dev ${devnum}; then devtype=usb; run scan_dev_for_boot_part; fi
vendor=emulation
virtio_boot=run boot_pci_enum; run virtio_init; if virtio dev ${devnum}; then devtype=virtio; run scan_dev_for_boot_part; fi
virtio_init=if ${virtio_need_init}; then virtio_need_init=false; virtio scan; fi
armbian_uenvs=armbianEnv.txt
uenvs=uEnv.txt
uenv_addr_r=0x44000000
EOF

echo -n "armbian_qemu_boot="
urglify_uboot_script <<'EOF'
run scsi_boot
EOF

echo -n "scan_dev_for_boot="
urglify_uboot_script <<'EOF'
echo Scanning ${devtype} ${devnum}:${distro_bootpart}...
for prefix in ${boot_prefixes}; do
    run scan_dev_for_armbian_env
    run scan_dev_for_uenv
done
EOF

echo -n "scan_dev_for_armbian_env="
urglify_uboot_script <<'EOF'
for armbian_uenv in ${armbian_uenvs}; do
    if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${armbian_uenv}; then
        echo Found ${prefix}${armbian_uenv}
        run load_armbian_env
        run boot_armbian_env
        echo SCRIPT FAILED: continuing...
    fi
done
EOF

echo -n "load_armbian_env="
urglify_uboot_script <<'EOF'
load ${devtype} ${devnum}:${distro_bootpart} ${uenv_addr_r} ${prefix}${armbian_uenv}
env import -t ${uenv_addr_r} ${filesize}
EOF

echo -n "boot_armbian_env="
urglify_uboot_script <<'EOF'
echo Found U-Boot script ${prefix}${armbian_uenv}
setenv fdt_addr_r {fdt_addr}
fdt addr ${fdt_addr}
setenv bootargs "console=ttyAMA0 console=tty0 root=${rootdev} rootflags=data=writeback rw rootfstype=${rootfstype}  no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory oops=panic panic_on_warn=1 panic=-1 ftrace_dump_on_oops=orig_cpu debug earlyprintk=serial slub_debug=UZ single"
printenv bootargs
load ${devtype} ${devnum} ${ramdisk_addr_r} ${prefix}uInitrd
load ${devtype} ${devnum} ${kernel_addr_r} ${prefix}Image
booti ${kernel_addr_r} ${ramdisk_addr_r} ${fdt_addr}
echo SCRIPT FAILED: continuing...
EOF

echo -n "scan_dev_for_uenv="
urglify_uboot_script <<'EOF'
for uenv in ${uenvs}; do
    if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${uenv}; then
        echo Found ${prefix}${uenv}
        run load_uenv
        run boot_uenv
        echo SCRIPT FAILED: continuing...
    fi
done
EOF

echo -n "load_uenv="
urglify_uboot_script <<'EOF'
load ${devtype} ${devnum}:${distro_bootpart} ${uenv_addr_r} ${prefix}${uenv}
env import -t ${uenv_addr_r} ${filesize}
EOF

echo -n "boot_uenv="
urglify_uboot_script <<'EOF'
echo Found U-Boot script ${prefix}${uenv}
setenv fdt_addr_r {fdt_addr}
fdt addr ${fdt_addr}
fstype ${devtype} ${devnum}:2 rootfstype
setenv bootargs "console=ttyAMA0 console=tty0 root=LABEL=ROOTFS rootflags=data=writeback rw rootfstype=${rootfstype} no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory oops=panic panic_on_warn=1 panic=-1 ftrace_dump_on_oops=orig_cpu debug earlyprintk=serial slub_debug=UZ single"
printenv bootargs
load ${devtype} ${devnum} ${ramdisk_addr_r} ${INITRD}
load ${devtype} ${devnum} ${kernel_addr_r} ${LINUX}
booti ${kernel_addr_r} ${ramdisk_addr_r} ${fdt_addr}
echo SCRIPT FAILED: continuing...
EOF