#!/bin/bash

# This script provides additional configuration options for Armbian.
# * Network
# ** nmtui
# * Snap
# ** Tuning snapd
# ** Update snaps
# * BTRFS
# ** Balance
# ** Show BTRFS usage
# * APT
# ** Clean apt cache, downloaded packages and lists
# * Root User
# ** Clean .ssh folder, .bash_history and .bash_logout
# * Armbian
# ** Patch armbian-install

# check if the executable exists
executable_exists(){
    if ! command -v "$1" &> /dev/null
    then
        # show a warning dialog and return 1
        whiptail --title "Warning" --msgbox "$1 is not installed" 8 78
        return 1
    fi
}

# execute a command and show a dialog with the output
execute_command() {
    local command=$1
    local title=$2
    # if title is not setted, use the command
    if [[ -z $title ]]; then
        local title=$command
    fi

    # create a temp file
    local temp_file=$(mktemp)

    # execute the command and save the output to the temp file
    $command > $temp_file 2>&1

    # show the output in a dialog
    whiptail --title "$title" --textbox --scrolltext $temp_file 20 78

    # remove the temp file
    rm $temp_file
}

# clean apt cache, downloaded packages and lists
clean_apt() {
    # clean apt cache
    apt-get clean

    # remove downloaded packages
    apt-get autoremove --purge

    # clean apt lists
    rm -rf /var/lib/apt/lists/*
}

# clean snap
clean_snap() {
    # remove all disabled snaps
    snap list --all | grep disabled | awk '{print $1, $3}' | while read snap_name snap_version; do
        snap remove $snap_name
    done

    # clean snap cache
    rm /var/lib/snapd/cache/*
}

# snap auto refresh menu
snap_auto_refresh_menu() {
    local choice

    # get current auto refresh status
    local auto_refresh_disabled=$(snap get system refresh.hold | grep -c "forever")
    local auto_refresh_status="ON"
    if [[ $auto_refresh_disabled -eq 1 ]]; then
        auto_refresh_status="OFF"
    fi

    # checklist
    choice=$(whiptail --title "Snap auto refresh" --checklist "Check it to enable auto fresh" 20 78 10 "Refresh" "Enabled" "$auto_refresh_status" 3>&1 1>&2 2>&3)

    # exit if cancel is pressed
    if [[ $? -ne 0 ]]; then
        return
    fi

    # apply changes if choice is differente from current status
    if [[ $auto_refresh_disabled -eq 1 && $choice == '"Refresh"' ]]; then
        execute_command "snap refresh --unhold"
    elif [[ $auto_refresh_disabled -eq 0 && $choice != '"Refresh"' ]]; then
        execute_command "snap refresh --hold"
    fi
}

# Snap menu
snap_menu() {
    local choice
    local options=("Refresh" "Enable/disable snap auto refresh" \
        "Clean" "Clean snapd cache and disabled snaps" \
        "Update" "Update snaps")

    while true; do
        choice=$(whiptail --title "Snap" --menu "Choose an option" 20 78 10 "${options[@]}" 3>&1 1>&2 2>&3)
        if [[ -z $choice ]]; then
            break
        fi

        case $choice in
            "Refresh")
                snap_auto_refresh_menu
                ;;
            "Clean")
                # confirm before apply
                whiptail --title "Clean snap" --yesno "This will remove all disabled snaps and clean the cache. \nAre you sure?" 10 78
                if [[ $? -ne 0 ]]; then
                    break
                fi
                execute_command clean_snap
                ;;
            "Update")
                # confirm before apply
                whiptail --title "Update snaps" --yesno "This will update all snaps. \nAre you sure?" 10 78
                if [[ $? -ne 0 ]]; then
                    break
                fi
                execute_command "snap refresh"
                ;;
            "Back")
                break
                ;;
        esac
    done
}

# btrfs balance menu
btrfs_balance_menu() {
    # show a input dialog to get the balance parameters
    local balance_parameters=$(whiptail --title "Balance BTRFS" --inputbox "Enter the balance parameters" 10 78 " -dusage=50 -musage=50 -dlimit=3 -mlimit=3" 3>&1 1>&2 2>&3)

    # exit if cancel is pressed
    if [[ $? -ne 0 ]]; then
        return
    fi

    # confirm before apply
    whiptail --title "Balance BTRFS" --yesno "This will balance the BTRFS filesystem. \nAre you sure?" 10 78
    if [[ $? -ne 0 ]]; then
        return
    fi

    # execute the command
    execute_command "btrfs balance start $balance_parameters /"
}

# BTRFS menu
btrfs_menu() {
    local choice
    local options=("Balance" "Balance BTRFS" \
        "Usage" "Show BTRFS usage" )

    while true; do
        choice=$(whiptail --title "BTRFS" --menu "Choose an option" 20 78 10 "${options[@]}" 3>&1 1>&2 2>&3)
        if [[ -z $choice ]]; then
            break
        fi

        case $choice in
            "Balance")
                btrfs_balance_menu
                ;;
            "Usage")
                execute_command "btrfs fi usage /"
                ;;
            "Back")
                break
                ;;
        esac
    done
}

# root user menu
root_user_menu(){
    local choice
    local options=("Clear" "Clear ~/.ssh and history files")

    while true; do
        choice=$(whiptail --title "Root user" --menu "Choose an option" 20 78 10 "${options[@]}" 3>&1 1>&2 2>&3)
        if [[ -z $choice ]]; then
            break
        fi

        case $choice in
            "Clear")
                # confirm before apply
                whiptail --title "Clear root user" --yesno "This will clear the root user history and ssh files. \nAre you sure?" 10 78
                if [[ $? -ne 0 ]]; then
                    continue
                fi
                execute_command "rm -rf /root/.ssh/* /root/.bash_history"
                ;;
        esac
    done
}

# download patch file and patch armbian-install
patch_armbian_install() {
    # download patch file
    wget -O /tmp/armbian-install.patch https://github.com/yaleh/amlogic-s9xxx-armbian/releases/download/2023011/armbian-install.patch

    # patch armbian-install
    patch /usr/sbin/armbian-install /tmp/armbian-install.patch

    ls -al /usr/sbin/armbian-install*

    # remove patch file
    rm /tmp/armbian-install.patch
}

# revert armbian-install patch
revert_armbian_install() {
    # mv armbian-install.orig to armbian-install if exists
    if [[ -f /usr/sbin/armbian-install.orig ]]; then
        mv /usr/sbin/armbian-install.orig /usr/sbin/armbian-install
    fi

    ls -al /usr/sbin/armbian-install*
}

# armbian flags menu
armbian_flags_menu() {
    # get current flags
    local no_rootfs_resize=$(test -f /root/.no_rootfs_resize && echo "ON" || echo "OFF")
    local not_logged_in_yet=$(test -f /root/.not_logged_in_yet && echo "ON" || echo "OFF")


    # checklist for /root/.no_rootfs_resize and /root/.not_logged_in_yet
    local flags=("no_rootfs_resize" "Do not resize rootfs" $no_rootfs_resize \
                "not_logged_in_yet" "Reinitialize on the next logging in" $not_logged_in_yet)

    # show a checklist dialog to get the flags
    local choice=$(whiptail --title "Armbian flags" --checklist "Choose the flags" 20 78 10 "${flags[@]}" 3>&1 1>&2 2>&3)

    # exit if cancel is pressed
    if [[ $? -ne 0 ]]; then
        return
    fi

    # create /root/.no_rootfs_resize if checked and the file does not exist
    if [[ $choice == *"no_rootfs_resize"* ]]; then
        if [[ ! -f /root/.no_rootfs_resize ]]; then
            touch /root/.no_rootfs_resize
        fi
    else
        # remove /root/.no_rootfs_resize if unchecked and the file exists
        if [[ -f /root/.no_rootfs_resize ]]; then
            rm /root/.no_rootfs_resize
        fi
    fi

    # create /root/.not_logged_in_yet if checked and the file does not exist
    if [[ $choice == *"not_logged_in_yet"* ]]; then
        if [[ ! -f /root/.not_logged_in_yet ]]; then
            touch /root/.not_logged_in_yet
        fi
    else
        # remove /root/.not_logged_in_yet if unchecked and the file exists
        if [[ -f /root/.not_logged_in_yet ]]; then
            rm /root/.not_logged_in_yet
        fi
    fi
    
    execute_command "ls -al /root/.*"
}

# Armbian menu
armbian_menu() {
    local choice
    local options=("Patch" "Patch armbian-install" \
                    "Revert" "Revert armbian-install patch" \
                    "Flags" "Armbian installation flags")

    while true; do
        choice=$(whiptail --title "Armbian" --menu "Choose an option" 20 78 10 "${options[@]}" 3>&1 1>&2 2>&3)
        if [[ -z $choice ]]; then
            break
        fi

        case $choice in
            "Patch")
                # if armbian-install.orig exists, show error and return to menu
                if [[ -f /usr/sbin/armbian-install.orig ]]; then
                    whiptail --title "Patch armbian-install" --msgbox "/usr/sbin/armbian-install.orig  already exists. \nPlease revert the patch first." 10 78
                    continue
                fi
                # confirm before apply
                whiptail --title "Patch armbian-install" --yesno "This will patch the armbian-install script. \nAre you sure?" 10 78
                if [[ $? -ne 0 ]]; then
                    continue
                fi
                execute_command "patch_armbian_install"
                ;;
            "Revert")
                # confirm before apply
                whiptail --title "Revert armbian-install patch" --yesno "This will revert the armbian-install script patch. \nAre you sure?" 10 78
                if [[ $? -ne 0 ]]; then
                    continue
                fi
                execute_command "revert_armbian_install"
                ;;
            "Flags")
                armbian_flags_menu
                ;;
        esac
    done
}

# debug menu
debug_menu() {
    # show a input dialog for command to debug
    local command=$(whiptail --title "Debug" --inputbox "Enter command to debug" 10 78 3>&1 1>&2 2>&3)
    if [[ -z $command ]]; then
        return
    fi

    # execute command
    execute_command "$command"
}

# main menu
main_menu() {
    local choice
    local options=("Network" "Network Mananger settings" \
                    "Snap" "Snap settings" \
                    "BTRFS" "BTRFS tuning" \
                    "APT" "APT cleanup" \
                    "Root" "Root user settings" \
                    "Armbian" "Armbian optimization" \
                    "Debug" "Debug dialog")

    while true; do
        choice=$(whiptail --title "Armbian Toolkit Options" --menu "Choose an option" 20 78 10 "${options[@]}" 3>&1 1>&2 2>&3)
        if [[ -z $choice ]]; then
            break
        fi

        case $choice in
            "Network")
                executable_exists "nmtui" && nmtui
                ;;
            "Snap")
                snap_menu
                ;;
            "BTRFS")
                btrfs_menu
                ;;
            "APT")
                # confirm before apply
                whiptail --title "APT cleanup" --yesno "This will clean the apt cache and remove downloaded packages. \nAre you sure?" 10 78
                if [[ $? -ne 0 ]]; then
                    break
                fi
                execute_command clean_apt "Clean APT"
                ;;
            "Root")
                root_user_menu
                ;;
            "Armbian")
                armbian_menu
                ;;
            "Debug")
                debug_menu
                ;;
        esac
    done
}

# Script parameters handling
while [[ $1 == *=* ]]; do
	parameter=${1%%=*}
	value=${1##*=}
	shift
	echo "Command line: setting $parameter to ${value:-(empty)}"
	eval "$parameter=\"$value\""
	scripted=true
done

if [[ $1 == "--help" ]]; then
	echo "Armbian Toolkit options:"
    echo ""
    echo "  --help: show this help"
    exit
fi

# Exit if debug is not setted and the script is not run by root
if [[ -z $debug && $EUID != 0 ]]; then
    echo "This tool requires root privileges. Try again with \"sudo \" please ..." >&2
    sleep 2
    exit 1
fi

#
# check for internet connection to install dependencies
#
wget -q --spider http://github.com
if [[ $? -ne 0 ]]; then
	read -n 1 -s -p "Warning: Configuration cannot work properly without a working internet connection. \
	Press CTRL C to stop or any key to ignore and continue."
fi

# main menu
main_menu

